<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="dictionary 1.0.0">
   <item title="iteration_1">
      <description>
         <b>Zbierany wymagania do pierwszej interacji</b>
      </description>
      <subitem label="1. Dodać do pliku baseStructure.xml restrykcje na poszczególne kolumny w bazie"></subitem>
      <subitem label="2. Dodać kody błędów jako publicne finalne statyczne pola klasy w usludze AddElementService jesli cos pujdzie nie tak to puścić wyjątek."> </subitem>
      <subitem label="3. Zmienić usługe AddElementService tak aby zwracała WordValue zamisat typu booleanean"></subitem>
      <subitem label="4. Metody z klas dao powinny rzucać wyjątek aplikacyjny w przypadku gdy nie uda się operacja na bazie."></subitem>
      <subitem label="5. Nalezy przeciązyć metody equals() i hashCode() we wszystkich encjachach."></subitem>
      <subitem label="6. Usunąć zbędne pliki jar z biblioteki hibernate w projekcie"></subitem>
      <subitem label="7. Przeniesc lokalna abstrakcyjna klase ServiceProvider do osobnego pliku tak aby byla dostepna globalnie"></subitem>
      <subitem label="8. Usuniecie nie uzywanej metody setSession w klasie AbstractDao i zmiana widocznosci pola session na private"></subitem>
      <subitem label="9. W klasie DictionaryDao zmiana sygnatury metody z void saveElement(WordValue element) na  WordValue saveElement(String wordName, Set&lt;String&gt; translations, Set&lt;String&gt; examples)"></subitem>
      <subitem label="10. W klasie DictionaryDao zmiana sygnatury metody z  void addTranslationToWord(TranslationValue translation) na TranslationValu addTranslationToWord(String translationName)"></subitem>
      <subitem label="11. W klasie DictionaryDao zmiana sygnatury metody z  void addExampleToWord(ExampleValue example) na ExampleValue addExampleToWord(String exampleName)"></subitem>
      <subitem label="12. W klasie DictionaryDao dodanie metod Set&lt;TranslationValu&gt; addTranslationToWord(Set&lt;String&gt; translationNames, String wordName) Set&lt;ExampleValue&gt; addExamplesToWord(String wordName, Set&lt;ExampleValue&gt; examples);"></subitem>
      <subitem label="14. W klasie DictionaryDao zmienić metode List&lt;WordValue&gt; findWord(String word); na postać WordValue findWord(String wordName);"></subitem>
      <subitem label="16. Stworzyc abstrakcyjna klase AbstractDaoTest na wzor klasy BaseTest dla uslug"></subitem>
      <subitem label="19. Dodanie abstrakcyjne valiation() metody do klasy AbstractService, metoda bedzie wywoływana w execute"></subitem>
      <subitem label="31. Ustawić konstruktor dla wszystkich encji na pywatny"></subitem>
      <subitem label="30. dao.DictionaryDao.findWord powinna zostać zmieniona aby zwracała typ WordValue."></subitem>
      <subitem label="37. HibernateUtils metoda getSession() powinna zawsze zwracac nową sesje"></subitem>
      <subitem label="28. HibernateUtils dodać do metody closesSession argument boolean notOccurredException który- mowi czy jest to zamykanie awaryjne czy noramlane"></subitem>
      <subitem label="20. Refaktoryzacja wszystkich klas gdzie w bloku catch wystepuje wywołanie assertNull(&quot;Is some error in TestBase&quot;, null); zmiana go na throw new AssertException();"></subitem>
      <subitem label="23. AbstractService zmienić widoczność pola protected final DictionaryDao dictionaryDao na private DictionaryDao dictionaryDao oraz oddać metode getDictionaryDao()"></subitem>
      <subitem label="32. ServiceProvider zmienić nazwe na AbstractProvider oraz dodać w metodach interface throw Exception, co wymusi na programiście przerzucanie wyjątku do klas nadrzędnych"></subitem>
      <subitem label="37. HibernateUtils method closeSession(Session session) should set argument session on null after the close of the session."></subitem>
      <subitem label="25. AbstractService przenieść tworzenie instancji pola Session session oraz DictionaryDao dictionaryDao do metody execute najlepiej stworzyć nową metode initializeFields."></subitem>
      <subitem label="29. AbstractService usunąć blok finalize oraz przenieść wywołanie metody closeSession() do bloków try i catch metoda ma być wywołana z parametrem emergencyClose w zależności od blkou: * try - true, * catch - false"></subitem>
      <subitem label="36. AdstractService dodać metode setSession która dodatkowo najpierw sprawdza czy sesja jest juz ustawiona jeśli nie to ustawia na podaną w argumencie.[POWIĄZANY Z 35]"></subitem>
      <subitem label="39. AbstractService dodanie metody finalizeFields usuwajacej referencje do stworzonych obiektów."></subitem>
      <subitem label="35. BaseTest: tworzyć sesje w klasie BaseTest co sprawi ze każda usługa zewnętrzna bedzie testowana na osobnej sesji hibernatowej."></subitem>
      <subitem label="21. Wszystkie usługi powinny rzucać wyjątek aplikacyjny do którego nalezy przekazać komunikat błedu z usługi"></subitem>
      <subitem label="22. Należy dodać wyłapywanie wyjątków Hibernata w klasie bazowej AbstractService, metoda runService powinna wyrzucać wyjątek wyżej do metody execute."></subitem>
      <subitem label="26. Wyjątki z usług powinny być przezucane na fasade, tam ostatecznie bedą obsłużone"></subitem>
      <subitem label="27. BaseTest powinna przechwytywać i obsługiwać wyjądki z usług."></subitem>      
      <subitem label="34. Opakować wyjątki Hibernate w wyjątek aplikacyjny"></subitem>
      <subitem label="48. ServiceExcetion i DaoExcetion umieścić w konstruktorze wywołanie e.printStockTrace()"></subitem>
      <subitem label="49. Exception all class in project, add protection against pass null in second argument of constructor"></subitem>
      <subitem label="47. DictionaryDaoImpl method findWord() should contain block try,catch."></subitem> 
      <subitem label="45. AbstractService stworzyć kilka metod które bedą sprawdzać czy operacja się udała i jeśli nie to rzucac wyjać komunikat błedu z usługi. Przykładowo jesli metoda zwroci null, to nalezy rzucic wyjatek z wiadomosci blędu."></subitem>
      <subitem label="46. AddElementService poprawić metode validate() tak aby jeśli pole nie przejdzie walidacji rzucany był wyjątek. BLOKOWANE[45]"></subitem>
      <subitem label="43. BaseTest invoke the method rollback() in the catch block. Software handling the transaction."></subitem> 
      <subitem label="50. AbstractTest and BaseDaoTest add new functionality which allows on testing error messages"></subitem>   
      <subitem label="15. Stworzenie klasy bazowej AbstractDataSource"></subitem>
      <subitem label="17. FacadeUtil rollback na fasadzie jesli cos pojdzie nie tak w ktorym kolwiek momencie, w dao czy w usłudze, w metodzie executeService()"></subitem>
      <subitem label="44. FacadeUtil tworzyć sesje na fasadzie co sprawi ze każda usługa zewnętrzna bedzie pracowała na osobnej sesji hibernatowej"></subitem>   
      <subitem label="38. AbstractTest i AbstractDaoTest rollback  po każdym  tescie, gdyż testy zawsze pracuja na pustej bazie."></subitem>
      <subitem label="40. Add new class ServiceManager which allows to call service in other service."></subitem>
      <subitem label="41. AbstractService add field ServiceManager."></subitem>
      <subitem label="18. Dodanie pola log do wszystkich klas, co pozwoli pozbyć się warningu przy uruchamianiu aplikacji. log4j:WARN No appenders could be found for logger (org.hibernate.cfg.Environment)."></subitem>
      <subitem label="33. Stworzyć servis FindElementService"></subitem>
      <subitem label="51. Walidacja Stringów podawanych do servisu AddElementService. Usunięcie wszystkich zbędnych białych znaków."></subitem>
      <subitem label="52. Add service AddTranslationToWord."></subitem>      <subitem label="33. Stworzyć servis FindElementService"></subitem>
      <subitem label="51. Walidacja Stringów podawanych do servisu AddElementService. Usunięcie wszystkich zbędnych białych znaków."></subitem>
      <subitem label="53. AbstractDatasource AbstractMenager Dodać metode restrictionIfNotNull dla wyniku wywołania servisu."></subitem>
      <subitem label="52. Add service AddTranslationToWord."></subitem>     
   </item>
   <item title="iteration_2">
      <description>iteration_2</description>
      <subitem
            label="54. Refaktoryzacja FacadeUtils.">
      </subitem>
      <subitem
            label="55. Refactoring classes *Exception. Invoke one construc
      <subitem
            label="56. Separate session have to be created in AbstractDataSource. This session will be independent from session in services.">
      </subitem>tor in anather.">
      </subitem>  

   </item>   
</cheatsheet>
